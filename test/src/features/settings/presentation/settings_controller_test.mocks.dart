// Mocks generated by Mockito 5.4.4 from annotations
// in bloc_template_app/test/src/features/settings/presentation/settings_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:bloc_template_app/src/features/settings/application/settings_service.dart'
    as _i2;
import 'package:flutter/material.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [SettingsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSettingsService extends _i1.Mock implements _i2.SettingsService {
  @override
  _i3.Future<String> language() => (super.noSuchMethod(
        Invocation.method(
          #language,
          [],
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #language,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #language,
            [],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<_i5.ThemeMode> themeMode() => (super.noSuchMethod(
        Invocation.method(
          #themeMode,
          [],
        ),
        returnValue: _i3.Future<_i5.ThemeMode>.value(_i5.ThemeMode.system),
        returnValueForMissingStub:
            _i3.Future<_i5.ThemeMode>.value(_i5.ThemeMode.system),
      ) as _i3.Future<_i5.ThemeMode>);

  @override
  _i3.Future<void> updateLanguage(String? language) => (super.noSuchMethod(
        Invocation.method(
          #updateLanguage,
          [language],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateThemeMode(_i5.ThemeMode? theme) => (super.noSuchMethod(
        Invocation.method(
          #updateThemeMode,
          [theme],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
